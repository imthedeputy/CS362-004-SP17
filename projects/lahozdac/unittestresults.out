***************************************
TESTING buyCard()

buyCard() test: PASS when trying to buy card that is too expensive.
buyCard() test: PASS when trying to buy card with no buys left.
buyCard() test: PASS when trying to buy card with none left in supply.
buyCard() test: PASS when successfully buying a card.

***************************************
TESTING isGameOver()

isGameOver() test: PASS when evaluating a game that's not over.
isGameOver() test: PASS when evaluating a game that's not over with 1 empty pile.
isGameOver() test: PASS when evaluating a game that's not over with 2 empty piles.
isGameOver() test: PASS when evaluating a game that's over with 3 empty piles.
isGameOver() test: PASS when evaluating a game that's over because the province supply is empty.

***************************************
TESTING fullDeckCount()

fullDeckCount() test: PASS counting 12 copper.
fullDeckCount() test: PASS counting 0 provinces.

***************************************
TESTING numHandCards()

numHandCards() test: PASS counting 3 cards in first player's hand.
numHandCards() test: PASS counting 0 cards in third player's hand.
numHandCards() test: PASS counting -10 cards in second player's hand.

***************************************
TESTING SMITHY

playSmithy() test: Testing with sufficient cards to draw

playSmithy() test: FAIL to put smithy on top of the played cards pile.

playSmithy() test: Testing with empty draw deck

playSmithy() test: FAIL to put smithy on top of the played cards pile.


***************************************
TESTING ADVENTURER

Testing Adventurer with sufficient treasures in draw deck

playing adventurer
playAdventurer() test: FAIL, too many cards in hand.
playAdventurer() test: FAIL to increase playedCardCount after playing adventurer.
playAdventurer() test: FAIL to put adventurer on top of the played cards pile.

Testing Adventurer with empty draw deck

playing adventurer
playAdventurer() test: FAIL, too many cards in hand.
playAdventurer() test: FAIL, not enough cards in discard.
playAdventurer() test: FAIL to put adventurer on top of the discard.


***************************************
TESTING VILLAGE

Testing playVillage() with sufficient cards in draw deck

playVillage() test: PASS when playing village with 1+ cards in draw deck.

Testing playVillage() with empty draw deck.

playVillage() test: PASS when playing village with no cards in draw deck.


***************************************
TESTING COUNCIL ROOM

Testing playCouncil_Room() with sufficient cards in all draw decks

playCouncil_Room() test: PASS when playing council room with 4+ cards in draw deck.

Testing playCouncil_Room() with empty draw decks

playCouncil_Room() test: PASS when playing council room with no cards in draw deck.


***************************************

File 'dominion.c'
Lines executed:37.03% of 659
Branches executed:41.37% of 423
Taken at least once:26.48% of 423
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 60 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
       60:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 7%
branch  1 taken 93%
        4:   10:    return 1;
       56:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 29%
branch  1 taken 71%
       16:   12:    return -1;
       40:   13:  return 0;
       60:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        -:   16:struct gameState* newGame() {
        2:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 1 returned 100% blocks executed 100%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        1:   23:  int* k = malloc(10 * sizeof(int));
        1:   24:  k[0] = k1;
        1:   25:  k[1] = k2;
        1:   26:  k[2] = k3;
        1:   27:  k[3] = k4;
        1:   28:  k[4] = k5;
        1:   29:  k[5] = k6;
        1:   30:  k[6] = k7;
        1:   31:  k[7] = k8;
        1:   32:  k[8] = k9;
        1:   33:  k[9] = k10;
        1:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
      190:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      100:   65:        }
       10:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        1:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        1:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:    	{
      155:  110:    	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:    	    {
        -:  112:    	      //check if card is a 'Victory' Kingdom card
       19:  113:    	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:  114:    		    {
        1:  115:        		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        1:  116:        		    state->supplyCount[i] = 8; 
        1:  117:        		  }
    #####:  118:        		  else{ state->supplyCount[i] = 12; }
        1:  119:        		}
        -:  120:    	      else
        -:  121:        		{
        9:  122:        		  state->supplyCount[i] = 10;
        -:  123:        		}
       10:  124:            break;
        -:  125:    	    }
        -:  126:    	  else    //card is not in the set choosen for the game
        -:  127:    	    {
      145:  128:    	      state->supplyCount[i] = -1;
        -:  129:    	    }
      145:  130:    	}
        -:  131:
       20:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        6:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:    	{
        6:  143:    	  state->deck[i][j] = estate;
        6:  144:    	  state->deckCount[i]++;
        6:  145:    	}
       32:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:    	{
       14:  148:    	  state->deck[i][j] = copper;
       14:  149:    	  state->deckCount[i]++;		
       14:  150:    	}
        2:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        6:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:    	{
    #####:  158:    	  return -1;
        -:  159:    	}
        2:  160:    }
        -:  161:
        -:  162:  //draw player hands
        6:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        2:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
       27:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  193:    drawCard(state->whoseTurn, state);
        5:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        1:  199:}
        -:  200:
function shuffle called 8 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        8:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        8:  209:  if (state->deckCount[player] < 1)
branch  0 taken 13%
branch  1 taken 88%
        1:  210:    return -1;
        7:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      114:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 88%
branch  1 taken 12%
       50:  215:    card = floor(Random() * state->deckCount[player]);
       50:  216:    newDeck[newDeckPos] = state->deck[player][card];
       50:  217:    newDeckPos++;
      290:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 66%
branch  1 taken 34%
       95:  219:      state->deck[player][i] = state->deck[player][i+1];
       95:  220:    }
       50:  221:    state->deckCount[player]--;
        -:  222:  }
      114:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 88%
branch  1 taken 12%
       50:  224:    state->deck[player][i] = newDeck[i];
       50:  225:    state->deckCount[player]++;
       50:  226:  }
        -:  227:
        7:  228:  return 0;
        8:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25%
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 33%
branch  1 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 50%
branch  1 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        4:  309:}
        -:  310:
function numHandCards called 3 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
        3:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 4 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
        4:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2 returned 100% blocks executed 100%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        2:  326:  int count = 0;
        -:  327:
       24:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  329:    {
       15:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 50%
branch  1 taken 50%
       10:  331:    }
        -:  332:
       20:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  334:    {
       12:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 50%
branch  1 taken 50%
        8:  336:    }
        -:  337:
       16:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  339:    {
        9:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 50%
branch  1 taken 50%
        6:  341:    }
        -:  342:
        2:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 11 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       11:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 5 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 20%
branch  1 taken 80%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6%
branch  1 taken 94%
        -:  405:    	{
        6:  406:    	  j++;
        6:  407:    	}
      100:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 25%
branch  1 taken 75%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        5:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:    	{
    #####:  469:    	  players[i] = -9999;
    #####:  470:    	}
        -:  471:      else
        -:  472:    	{
    #####:  473:    	  players[i] = scoreFor (i, state);
        -:  474:    	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:    	{
    #####:  483:    	  j = i;
    #####:  484:    	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 27 returned 100% blocks executed 91%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       27:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 19%
branch  1 taken 81%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       70:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 86%
branch  1 taken 14%
       30:  534:      state->deck[player][i] = state->discard[player][i];
       30:  535:      state->discard[player][i] = -1;
       30:  536:    }
        -:  537:
        5:  538:    state->deckCount[player] = state->discardCount[player];
        5:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        5:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        5:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        5:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        5:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        5:  559:    if (deckCounter == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:  560:      return -1;
        -:  561:
        5:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        5:  563:    state->deckCount[player]--;
        5:  564:    state->handCount[player]++;//Increment hand count
        5:  565:  }
        -:  566:
        -:  567:  else{
       22:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       22:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       22:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       22:  576:    state->deckCount[player]--;
       22:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       27:  580:  return 0;
       27:  581:}
        -:  582:
function getCost called 3 returned 100% blocks executed 16%
        -:  583:int getCost(int cardNumber)
        -:  584:{
        3:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 67%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        3:  644:}
        -:  645:
function cardEffect called 8 returned 100% blocks executed 8%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  // int k;
        -:  651:  int x;
        -:  652:  int index;
        8:  653:  int currentPlayer = whoseTurn(state);
        8:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        8:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        8:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        8:  660:  int z = 0;// this is the counter for the temp hand
        8:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        8:  667:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        2:  670:      return playAdventurer(state, currentPlayer, &cardDrawn, temphand, &drawntreasure);
        -:  671: //      while(drawntreasure<2){
        -:  672:	// if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  673:	//   shuffle(currentPlayer, state);
        -:  674:	// }
        -:  675:	// drawCard(currentPlayer, state);
        -:  676:	// cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  677:	// if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  678:	//   drawntreasure++;
        -:  679:	// else{
        -:  680:	//   temphand[z]=cardDrawn;
        -:  681:	//   state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  682:	//   z++;
        -:  683:	// }
        -:  684: //      }
        -:  685: //      while(z-1>=0){
        -:  686:	// state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  687:	// z=z-1;
        -:  688: //      }
        -:  689: //      return 0;
        -:  690:			
        -:  691:    case council_room:
        -:  692:      //+4 Cards
       20:  693:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  694:	{
        8:  695:	  drawCard(currentPlayer, state);
        8:  696:	}
        -:  697:			
        -:  698:      //+1 Buy
        2:  699:      state->numBuys++;
        -:  700:			
        -:  701:      //Each other player draws a card
       12:  702:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  703:	{
        4:  704:	  if ( i != currentPlayer )
branch  0 taken 50%
branch  1 taken 50%
        -:  705:	    {
        2:  706:	      drawCard(i, state);
        2:  707:	    }
        4:  708:	}
        -:  709:			
        -:  710:      //put played card in played card pile
        2:  711:      discardCard(handPos, currentPlayer, state, 0);
        -:  712:			
        2:  713:      return 0;
        -:  714:			
        -:  715:    case feast:
        -:  716:      //gain card with cost up to 5
        -:  717:      //Backup hand
    #####:  718:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  719:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  720:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  721:      }
        -:  722:      //Backup hand
        -:  723:
        -:  724:      //Update Coins for Buy
    #####:  725:      updateCoins(currentPlayer, state, 5);
    #####:  726:      x = 1;//Condition to loop on
    #####:  727:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  728:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  729:	  if (DEBUG)
        -:  730:	    printf("None of that card left, sorry!\n");
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  734:	  }
    #####:  735:	}
    #####:  736:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  737:	  printf("That card is too expensive!\n");
        -:  738:
        -:  739:	  if (DEBUG){
        -:  740:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  741:	  }
    #####:  742:	}
        -:  743:	else{
        -:  744:
        -:  745:	  if (DEBUG){
        -:  746:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  747:	  }
        -:  748:
    #####:  749:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  750:	  x = 0;//No more buying cards
        -:  751:
        -:  752:	  if (DEBUG){
        -:  753:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  754:	  }
        -:  755:
        -:  756:	}
        -:  757:      }     
        -:  758:
        -:  759:      //Reset Hand
    #####:  760:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  761:	state->hand[currentPlayer][i] = temphand[i];
    #####:  762:	temphand[i] = -1;
    #####:  763:      }
        -:  764:      //Reset Hand
        -:  765:      			
    #####:  766:      return 0;
        -:  767:			
        -:  768:    case gardens:
    #####:  769:      return -1;
        -:  770:			
        -:  771:    case mine:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:		
    #####:  779:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  780:	{
    #####:  781:	  return -1;
        -:  782:	}
        -:  783:
    #####:  784:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  return -1;
        -:  787:	}
        -:  788:
    #####:  789:      gainCard(choice2, state, 2, currentPlayer);
        -:  790:
        -:  791:      //discard card from hand
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:
        -:  794:      //discard trashed card
    #####:  795:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  798:	    {
    #####:  799:	      discardCard(i, currentPlayer, state, 0);			
    #####:  800:	      break;
        -:  801:	    }
    #####:  802:	}
        -:  803:			
    #####:  804:      return 0;
        -:  805:			
        -:  806:    case remodel:
    #####:  807:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  808:
    #####:  809:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  810:	{
    #####:  811:	  return -1;
        -:  812:	}
        -:  813:
    #####:  814:      gainCard(choice2, state, 0, currentPlayer);
        -:  815:
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:
        -:  819:      //discard trashed card
    #####:  820:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  821:	{
    #####:  822:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  823:	    {
    #####:  824:	      discardCard(i, currentPlayer, state, 0);			
    #####:  825:	      break;
        -:  826:	    }
    #####:  827:	}
        -:  828:
        -:  829:
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case smithy:
        2:  833:      return playSmithy(state, currentPlayer, handPos);
        -:  834: //      //+3 Cards
        -:  835: //      for (i = 0; i < 3; i++)
        -:  836:	// {
        -:  837:	//   drawCard(currentPlayer, state);
        -:  838:	// }
        -:  839:			
        -:  840: //      //discard card from hand
        -:  841: //      discardCard(handPos, currentPlayer, state, 0);
        -:  842: //      return 0;
        -:  843:		
        -:  844:    case village:
        -:  845:      //+1 Card
        2:  846:      drawCard(currentPlayer, state);
        -:  847:			
        -:  848:      //+2 Actions
        2:  849:      state->numActions = state->numActions + 2;
        -:  850:			
        -:  851:      //discard played card from hand
        2:  852:      discardCard(handPos, currentPlayer, state, 0);
        2:  853:      return 0;
        -:  854:		
        -:  855:    case baron:
    #####:  856:      state->numBuys++;//Increase buys by 1!
    #####:  857:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  858:	int p = 0;//Iterator for hand!
    #####:  859:	int card_not_discarded = 1;//Flag for discard set!
    #####:  860:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  861:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  862:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  863:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  864:	    state->discardCount[currentPlayer]++;
    #####:  865:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  866:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  867:	    }
    #####:  868:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  869:	    state->handCount[currentPlayer]--;
    #####:  870:	    card_not_discarded = 0;//Exit the loop
    #####:  871:	  }
    #####:  872:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  873:	    if(DEBUG) {
        -:  874:	      printf("No estate cards in your hand, invalid choice\n");
        -:  875:	      printf("Must gain an estate if there are any\n");
        -:  876:	    }
    #####:  877:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  878:	      gainCard(estate, state, 0, currentPlayer);
    #####:  879:	      state->supplyCount[estate]--;//Decrement estates
    #####:  880:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  881:		isGameOver(state);
    #####:  882:	      }
    #####:  883:	    }
    #####:  884:	    card_not_discarded = 0;//Exit the loop
    #####:  885:	  }
        -:  886:			    
        -:  887:	  else{
    #####:  888:	    p++;//Next card
        -:  889:	  }
        -:  890:	}
    #####:  891:      }
        -:  892:			    
        -:  893:      else{
    #####:  894:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  895:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  896:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  897:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  898:	    isGameOver(state);
    #####:  899:	  }
    #####:  900:	}
        -:  901:      }
        -:  902:	    
        -:  903:      
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case great_hall:
        -:  907:      //+1 Card
    #####:  908:      drawCard(currentPlayer, state);
        -:  909:			
        -:  910:      //+1 Actions
    #####:  911:      state->numActions++;
        -:  912:			
        -:  913:      //discard card from hand
    #####:  914:      discardCard(handPos, currentPlayer, state, 0);
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case minion:
        -:  918:      //+1 action
    #####:  919:      state->numActions++;
        -:  920:			
        -:  921:      //discard card from hand
    #####:  922:      discardCard(handPos, currentPlayer, state, 0);
        -:  923:			
    #####:  924:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  925:	{
    #####:  926:	  state->coins = state->coins + 2;
    #####:  927:	}
        -:  928:			
    #####:  929:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  930:	{
        -:  931:	  //discard hand
    #####:  932:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  933:	    {
    #####:  934:	      discardCard(handPos, currentPlayer, state, 0);
        -:  935:	    }
        -:  936:				
        -:  937:	  //draw 4
    #####:  938:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  939:	    {
    #####:  940:	      drawCard(currentPlayer, state);
    #####:  941:	    }
        -:  942:				
        -:  943:	  //other players discard hand and redraw if hand size > 4
    #####:  944:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  945:	    {
    #####:  946:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  947:		{
    #####:  948:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  949:		    {
        -:  950:		      //discard hand
    #####:  951:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  952:			{
    #####:  953:			  discardCard(handPos, i, state, 0);
        -:  954:			}
        -:  955:							
        -:  956:		      //draw 4
    #####:  957:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  958:			{
    #####:  959:			  drawCard(i, state);
    #####:  960:			}
    #####:  961:		    }
    #####:  962:		}
    #####:  963:	    }
        -:  964:				
    #####:  965:	}
    #####:  966:      return 0;
        -:  967:		
        -:  968:    case steward:
    #####:  969:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  970:	{
        -:  971:	  //+2 cards
    #####:  972:	  drawCard(currentPlayer, state);
    #####:  973:	  drawCard(currentPlayer, state);
    #####:  974:	}
    #####:  975:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  976:	{
        -:  977:	  //+2 coins
    #####:  978:	  state->coins = state->coins + 2;
    #####:  979:	}
        -:  980:      else
        -:  981:	{
        -:  982:	  //trash 2 cards in hand
    #####:  983:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  984:	  discardCard(choice3, currentPlayer, state, 1);
        -:  985:	}
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:		
        -:  991:    case tribute:
    #####:  992:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  993:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  994:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  995:	  state->deckCount[nextPlayer]--;
    #####:  996:	}
    #####:  997:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  998:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  999:	  state->discardCount[nextPlayer]--;
    #####: 1000:	}
        -: 1001:	else{
        -: 1002:	  //No Card to Reveal
        -: 1003:	  if (DEBUG){
        -: 1004:	    printf("No cards to reveal\n");
        -: 1005:	  }
        -: 1006:	}
    #####: 1007:      }
        -: 1008:	    
        -: 1009:      else{
    #####: 1010:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1011:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1012:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1013:	    state->deckCount[nextPlayer]++;
    #####: 1014:	    state->discard[nextPlayer][i] = -1;
    #####: 1015:	    state->discardCount[nextPlayer]--;
    #####: 1016:	  }
        -: 1017:			    
    #####: 1018:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1019:	} 
    #####: 1020:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1022:	state->deckCount[nextPlayer]--;
    #####: 1023:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1025:	state->deckCount[nextPlayer]--;
        -: 1026:      }    
        -: 1027:		       
    #####: 1028:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1029:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1030:	state->playedCardCount++;
    #####: 1031:	tributeRevealedCards[1] = -1;
    #####: 1032:      }
        -: 1033:
    #####: 1034:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1035:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1036:	  state->coins += 2;
    #####: 1037:	}
        -: 1038:		    
    #####: 1039:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1040:	  drawCard(currentPlayer, state);
    #####: 1041:	  drawCard(currentPlayer, state);
    #####: 1042:	}
        -: 1043:	else{//Action Card
    #####: 1044:	  state->numActions = state->numActions + 2;
        -: 1045:	}
    #####: 1046:      }
        -: 1047:	    
    #####: 1048:      return 0;
        -: 1049:		
        -: 1050:    case ambassador:
    #####: 1051:      j = 0;		//used to check if player has enough cards to discard
        -: 1052:
    #####: 1053:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
    #####: 1058:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:
    #####: 1063:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
    #####: 1065:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1066:	    {
    #####: 1067:	      j++;
    #####: 1068:	    }
    #####: 1069:	}
    #####: 1070:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1071:	{
    #####: 1072:	  return -1;				
        -: 1073:	}
        -: 1074:
        -: 1075:      if (DEBUG) 
        -: 1076:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1077:
        -: 1078:      //increase supply count for choosen card by amount being discarded
    #####: 1079:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1080:			
        -: 1081:      //each other player gains a copy of revealed card
    #####: 1082:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1083:	{
    #####: 1084:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1085:	    {
    #####: 1086:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1087:	    }
    #####: 1088:	}
        -: 1089:
        -: 1090:      //discard played card from hand
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1092:
        -: 1093:      //trash copies of cards returned to supply
    #####: 1094:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1095:	{
    #####: 1096:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:	    {
    #####: 1098:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1099:		{
    #####: 1100:		  discardCard(i, currentPlayer, state, 1);
    #####: 1101:		  break;
        -: 1102:		}
    #####: 1103:	    }
    #####: 1104:	}			
        -: 1105:
    #####: 1106:      return 0;
        -: 1107:		
        -: 1108:    case cutpurse:
    #####: 1109:      return playCutpurse(state, currentPlayer, handPos);
        -: 1110: //      updateCoins(currentPlayer, state, 2);
        -: 1111: //      for (i = 0; i < state->numPlayers; i++)
        -: 1112:	// {
        -: 1113:	//   if (i != currentPlayer)
        -: 1114:	//     {
        -: 1115:	//       for (j = 0; j < state->handCount[i]; j++)
        -: 1116:	// 	{
        -: 1117:	// 	  if (state->hand[i][j] == copper)
        -: 1118:	// 	    {
        -: 1119:	// 	      discardCard(j, i, state, 0);
        -: 1120:	// 	      break;
        -: 1121:	// 	    }
        -: 1122:	// 	  if (j == state->handCount[i])
        -: 1123:	// 	    {
        -: 1124:	// 	      for (k = 0; k < state->handCount[i]; k++)
        -: 1125:	// 		{
        -: 1126:	// 		  if (DEBUG)
        -: 1127:	// 		    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1128:	// 		}	
        -: 1129:	// 	      break;
        -: 1130:	// 	    }		
        -: 1131:	// 	}
        -: 1132:					
        -: 1133:	//     }
        -: 1134:				
        -: 1135:	// }				
        -: 1136:
        -: 1137: //      //discard played card from hand
        -: 1138: //      discardCard(handPos, currentPlayer, state, 0);			
        -: 1139:
        -: 1140: //      return 0;
        -: 1141:
        -: 1142:		
        -: 1143:    case embargo: 
        -: 1144:      //+2 Coins
    #####: 1145:      state->coins = state->coins + 2;
        -: 1146:			
        -: 1147:      //see if selected pile is in play
    #####: 1148:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  return -1;
        -: 1151:	}
        -: 1152:			
        -: 1153:      //add embargo token to selected supply pile
    #####: 1154:      state->embargoTokens[choice1]++;
        -: 1155:			
        -: 1156:      //trash card
    #####: 1157:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1158:      return 0;
        -: 1159:		
        -: 1160:    case outpost:
        -: 1161:      //set outpost flag
    #####: 1162:      state->outpostPlayed++;
        -: 1163:			
        -: 1164:      //discard card
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1166:      return 0;
        -: 1167:		
        -: 1168:    case salvager:
        -: 1169:      //+1 buy
    #####: 1170:      state->numBuys++;
        -: 1171:			
    #####: 1172:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1173:	{
        -: 1174:	  //gain coins equal to trashed card
    #####: 1175:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1176:	  //trash card
    #####: 1177:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1178:	}
        -: 1179:			
        -: 1180:      //discard card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1182:      return 0;
        -: 1183:		
        -: 1184:    case sea_hag:
    #####: 1185:      return playSeaHag(state, currentPlayer);
        -: 1186: //      for (i = 0; i < state->numPlayers; i++){
        -: 1187:	// if (i != currentPlayer){
        -: 1188:	//   state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1189: //    state->deckCount[i]--;
        -: 1190:	//   state->discardCount[i]++;
        -: 1191:	//   state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1192:	// }
        -: 1193: //      }
        -: 1194: //      return 0;
        -: 1195:		
        -: 1196:    case treasure_map:
        -: 1197:      //search hand for another treasure_map
    #####: 1198:      index = -1;
    #####: 1199:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
    #####: 1201:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1202:	    {
    #####: 1203:	      index = i;
    #####: 1204:	      break;
        -: 1205:	    }
    #####: 1206:	}
    #####: 1207:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1208:	{
        -: 1209:	  //trash both treasure cards
    #####: 1210:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1211:	  discardCard(index, currentPlayer, state, 1);
        -: 1212:
        -: 1213:	  //gain 4 Gold cards
    #####: 1214:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1215:	    {
    #####: 1216:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1217:	    }
        -: 1218:				
        -: 1219:	  //return success
    #####: 1220:	  return 1;
        -: 1221:	}
        -: 1222:			
        -: 1223:      //no second treasure_map found in hand
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:	
    #####: 1227:  return -1;
        8: 1228:}
        -: 1229:
function playSmithy called 2 returned 100% blocks executed 100%
        -: 1230:int playSmithy(struct gameState *state, int currentPlayer, int handPos) {
        -: 1231:  int i;
        2: 1232:  int hp = handPos;
        -: 1233:  //+3 Cards
       16: 1234:  for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1235:  {
        6: 1236:    drawCard(currentPlayer, state);
        6: 1237:  }
        -: 1238:      
        -: 1239:  //discard card from hand
        -: 1240:  if(BUGS && BUG_SM)
        2: 1241:    hp = handPos+1;  // bug: discard wrong card (handPos -> handPos + 1)
        -: 1242:
        2: 1243:  discardCard(hp, currentPlayer, state, 0);
        2: 1244:  return 0;
        -: 1245:}
        -: 1246:
function playAdventurer called 2 returned 100% blocks executed 73%
        -: 1247:int playAdventurer(struct gameState *state, int currentPlayer, int * cardDrawn, int *temphand, int * drawntreasure) {
        2: 1248:  printf("playing adventurer\n");
        2: 1249:  int z = 0;
       12: 1250:  while(*drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33%
        4: 1251:    if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 25%
branch  1 taken 75%
        1: 1252:      shuffle(currentPlayer, state);
        1: 1253:    }
        4: 1254:    drawCard(currentPlayer, state);
        4: 1255:    *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4: 1256:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        4: 1257:      (*drawntreasure)++;
        -: 1258:    else{
        -: 1259:      if(BUGS && BUG_AD) {
    #####: 1260:        temphand[z]=cardDrawn; // bug: assign address of cardDrawn instead of value
    #####: 1261:        printf("temphand[z]=%d\n", cardDrawn);
        -: 1262:      }
        -: 1263:      else
        -: 1264:        temphand[z]=*cardDrawn;
    #####: 1265:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1266:      z++;
        -: 1267:    }
        -: 1268:  }
        4: 1269:  while(z-1 >= 0){
branch  0 taken 0%
branch  1 taken 100%
    #####: 1270:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1271:    z = z-1;
        -: 1272:  }
        2: 1273:  return 0;
        -: 1274:}
        -: 1275:
function playCutpurse called 0 returned 0% blocks executed 0%
        -: 1276:int playCutpurse(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1277:  printf("playing cutpurse\n");
        -: 1278:
    #####: 1279:  updateCoins(currentPlayer, state, 2);
        -: 1280:
        -: 1281:  int i, j, k;
        -: 1282:  
    #####: 1283:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1284:  {
    #####: 1285:    if ( (BUGS && BUG_CP) ? i == currentPlayer : i != currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1286:    {
    #####: 1287:      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1288:      {
    #####: 1289:        if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1290:          {
    #####: 1291:            discardCard(j, i, state, 0);
    #####: 1292:            break;
        -: 1293:          }
    #####: 1294:        if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1295:        {
    #####: 1296:          for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1297:          {
        -: 1298:            if (DEBUG)
        -: 1299:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1300:          } 
    #####: 1301:          break;
        -: 1302:        }   
    #####: 1303:      }      
    #####: 1304:    } 
    #####: 1305:  }       
        -: 1306:
        -: 1307:  //discard played card from hand
    #####: 1308:  discardCard(handPos, currentPlayer, state, 0);      
        -: 1309:
    #####: 1310:  return 0;
        -: 1311:}
        -: 1312:
function playSeaHag called 0 returned 0% blocks executed 0%
        -: 1313:int playSeaHag(struct gameState *state, int currentPlayer) {
    #####: 1314:  printf("playing Sea Hag\n");
        -: 1315:  int i;
    #####: 1316:  for (i = 0; i < state->numPlayers; (BUGS && BUG_SH) ? i-- : i++){
branch  0 never executed
branch  1 never executed
    #####: 1317:    if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1318:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          
    #####: 1319:      state->deckCount[i]--;
    #####: 1320:      state->discardCount[i]++;
    #####: 1321:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1322:    }
    #####: 1323:  }
    #####: 1324:  return 0;
        -: 1325:}
        -: 1326:
function playEmbargo called 0 returned 0% blocks executed 0%
        -: 1327:int playEmbargo(struct gameState *state, int choice1, int currentPlayer, int handPos) {
    #####: 1328:  printf("playing embargo\n");
        -: 1329:  //+2 Coins
    #####: 1330:  state->coins = state->coins + 2;
        -: 1331:    
        -: 1332:  //see if selected pile is in play
    #####: 1333:  if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1334:  {
    #####: 1335:    return -1;
        -: 1336:  }
        -: 1337:    
        -: 1338:  //add embargo token to selected supply pile
    #####: 1339:  state->embargoTokens[choice1]++;
        -: 1340:    
        -: 1341:  //trash card
    #####: 1342:  discardCard(handPos, currentPlayer, state, 1);    
    #####: 1343:  return 0;
    #####: 1344:}
        -: 1345:
function discardCard called 6 returned 100% blocks executed 80%
        -: 1346:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1347:{
        -: 1348:	
        -: 1349:  //if card is not trashed, added to Played pile 
        6: 1350:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1351:    {
        -: 1352:      //add card to played pile
        6: 1353:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1354:      state->playedCardCount++;
        6: 1355:    }
        -: 1356:	
        -: 1357:  //set played card to -1
        6: 1358:  state->hand[currentPlayer][handPos] = -1;
        -: 1359:	
        -: 1360:  //remove card from player's hand
        6: 1361:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1362:    {
        -: 1363:      //reduce number of cards in hand
    #####: 1364:      state->handCount[currentPlayer]--;
    #####: 1365:    }
        6: 1366:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1367:    {
        -: 1368:      //reduce number of cards in hand
    #####: 1369:      state->handCount[currentPlayer]--;
    #####: 1370:    }
        -: 1371:  else 	
        -: 1372:    {
        -: 1373:      //replace discarded card with last card in hand
        6: 1374:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1375:      //set last card to -1
        6: 1376:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1377:      //reduce number of cards in hand
        6: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
        -: 1380:	
        6: 1381:  return 0;
        -: 1382:}
        -: 1383:
function gainCard called 1 returned 100% blocks executed 72%
        -: 1384:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1385:{
        -: 1386:  //Note: supplyPos is enum of choosen card
        -: 1387:	
        -: 1388:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1389:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1390:    {
    #####: 1391:      return -1;
        -: 1392:    }
        -: 1393:	
        -: 1394:  //added card for [whoseTurn] current player:
        -: 1395:  // toFlag = 0 : add to discard
        -: 1396:  // toFlag = 1 : add to deck
        -: 1397:  // toFlag = 2 : add to hand
        -: 1398:
        1: 1399:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1400:    {
    #####: 1401:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1402:      state->deckCount[player]++;
    #####: 1403:    }
        1: 1404:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1405:    {
    #####: 1406:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1407:      state->handCount[player]++;
    #####: 1408:    }
        -: 1409:  else
        -: 1410:    {
        1: 1411:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1412:      state->discardCount[player]++;
        -: 1413:    }
        -: 1414:	
        -: 1415:  //decrease number in supply pile
        1: 1416:  state->supplyCount[supplyPos]--;
        -: 1417:	 
        1: 1418:  return 0;
        1: 1419:}
        -: 1420:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1421:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1422:{
        -: 1423:  int i;
        -: 1424:	
        -: 1425:  //reset coin count
        1: 1426:  state->coins = 0;
        -: 1427:
        -: 1428:  //add coins for each Treasure card in player's hand
       12: 1429:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1430:    {
        5: 1431:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1432:	{
        4: 1433:	  state->coins += 1;
        4: 1434:	}
        1: 1435:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1436:	{
    #####: 1437:	  state->coins += 2;
    #####: 1438:	}
        1: 1439:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1440:	{
    #####: 1441:	  state->coins += 3;
    #####: 1442:	}	
        5: 1443:    }	
        -: 1444:
        -: 1445:  //add bonus
        1: 1446:  state->coins += bonus;
        -: 1447:
        1: 1448:  return 0;
        -: 1449:}
        -: 1450:
        -: 1451:
        -: 1452://end of dominion.c
        -: 1453:
